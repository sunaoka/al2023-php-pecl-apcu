; Enable APCu extension module
extension = apcu.so

; apc.enabled can be set to 0 to disable APC. This is primarily useful when
; APC is statically compiled into PHP, since there is no other way to disable it
; (when compiled as a DSO, the extension line in php.ini can just be
; commented-out).
apc.enabled = 1

; The number of shared memory segments to allocate for the compiler cache. If
; APC is running out of shared memory but apc.shm_size is set as high as the
; system allows, raising this value might prevent APC from exhausting its
; memory.
;apc.shm_segments = 1

; The size of each shared memory segment given by a shorthand notation as
; described in this FAQ. By default, some systems (including most BSD variants)
; have very low limits on the size of a shared memory segment.
;apc.shm_size = 32M

; A "hint" about the number of distinct variables that might be stored. Set to
; zero or omit if not sure.
;apc.entries_hint = 4096

; Consider cache entries without an explicit TTL to be expired if they have
; not been accessed in this many seconds. Effectively, this allows such entries
; to be removed opportunistically during a cache insert, or prior to a full
; expunge. Note that because removal is opportunistic, entries can still be
; readable even if they are older than apc.ttl seconds. This setting has no
; effect on cache entries that have an explicit TTL specified.
;apc.ttl = 0

; The number of seconds that a cache entry may remain on the
; garbage-collection list. This value provides a fail-safe in the event that a
; server process dies while executing a cached source file; if that source file
; is modified, the memory allocated for the old version will not be reclaimed
; until this TTL reached. Set to zero to disable this feature.
;apc.gc_ttl = 3600

; If compiled with MMAP support by using --enable-mmap this is the
; mktemp-style file_mask to pass to the mmap module for determining whether your
; mmap'ed memory region is going to be file-backed or shared memory backed. For
; straight file-backed mmap, set it to something like /tmp/apc.XXXXXX (exactly 6
; Xs). To use POSIX-style shm_open/mmap put a .shm somewhere in your mask. e.g.
; /apc.shm.XXXXXX You can also set it to /dev/zero to use your kernel's
; /dev/zero interface to anonymous mmap'ed memory. Leaving it undefined will
; force an anonymous mmap.
apc.mmap_file_mask = /tmp/apc.XXXXXX

; On very busy servers whenever you start the server or modify files you can
; create a race of many processes all trying to cache the same file at the same
; time. This option sets the percentage of processes that will skip trying to
; cache an uncached file. Or think of it as the probability of a single process
; to skip caching. For example, setting apc.slam_defense to 75 would mean that
; there is a 75% chance that the process will not cache an uncached file. So,
; the higher the setting the greater the defense against cache slams. Setting
; this to 0 disables this feature.
;apc.slam_defense = 1

; Mostly for testing and debugging. Setting this enables APC for the CLI
; version of PHP. Under normal circumstances, it is not ideal to create,
; populate and destroy the APC cache on every CLI request, but for various test
; scenarios it is useful to be able to enable APC for the CLI version of PHP
; easily.
;apc.enable_cli = 0

; Enables APC handling of signals, such as SIGSEGV, that write core files when
; signaled. When these signals are received, APC will attempt to unmap the
; shared memory segment in order to exclude it from the core file. This setting
; may improve system stability when fatal signals are received and a large APC
; shared memory segment is configured.
;
; Warning:
; This feature is potentially dangerous. Unmapping the shared memory segment
; in a fatal signal handler may cause undefined behaviour if a fatal error
; occurs.
;
; Note:
; Although some kernels may provide a facility to ignore various types of
; shared memory when generating a core dump file, these implementations may also
; ignore important shared memory segments such as the Apache scoreboard.
;apc.serializer = php

; Optionally, set a path to the directory that APC will load cache data at
; startup.
;apc.preload_path =

; Use the SAPI request start time for TTL.
;apc.use_request_time = 0
